
from itertools import product


def SUPERSET(S): # Generate relation containing all the subsets
       
        R=frozenset([])      
        R=[(i,j) for i,j in product(S,S)];
        return R

def THEMATRIX(A,c): # matrix builder assumes relation is built from a monotonous set of integers
        #in which for each a!=0 there is a b = a-1
    m = [[ 0 for x in xrange(c)] for y in xrange(c)]
    
    for x in range (c):
        for y in range (c):
           #if x in B and y in B:
             for i in range(len(A)):
                if A[i] == (x,y):
                        m[x][y]=1
                 # Remove else statement which brings everything back to 0!      
                #else:
                     #   m[x][y]=0
                        
    return m
#base function for adjacency matrix when power = 2
def BASEPROD(A,B):
    l =len(A)
    result= [[ 0 for x in xrange(l)] for y in xrange(l)]
    for x in range(0,l):
        for y in range (0,l):
            for z in range (0, l):
                if (A[x][y] == 1  and B[y][z] == 1):
                    result [x][z] = 1
    return result
#Recursive Method to compose adjacency matrix when power >2
def PROD(A,c):
    if c == 0:
        return 0
    if c == 1:
        return A
    if c == 2: 
        #call 
        return BASEPROD(A,A)
    else:
       return BASEPROD(A,PROD(A,c-1))

#method to generate tuples from adjacency matrix
def GETTUP(p):
    tups =[];
    for x in range(len(p)):
        for y in range(len(p)):
           if p[x][y] == 1:
               tups.append((x, y))
    return tups
               
               
def Main():
    
        A = frozenset ([0,1,2,3,4])
        L = len(A)
        R= SUPERSET(A); #relation containing all the subsets
        print " "
        print "The universal relation " 
        #A relation with some of the subsets removed         
        myset = (0, 0), (0, 1), (0, 3), (1, 0), (1, 1), (3, 2), (3, 3)
        #myset = (1, 1), (1, 2), (1, 3), (2, 3), (2, 4), (3, 1), (3, 4), (3, 5), (4, 2), (4, 5), (5, 1), (5, 2), (5, 4)
        print R
        print " "
        
        print "Its matrix to multiply"
        # Calls code to generate the matrix for a given relation and prints the matrix
        M = THEMATRIX(myset,L)
        print " "
        for index, item in enumerate (M,start=1):
            print(item)
            if not index % L:
                print("")
    
    
        #test powers x= 2,3,4,5 etc
        test = [1, 2, 3, 4, 5, 6]
        
        for x in test: #for each test print the following results
        
            print ' Matrix power = {}'.format(x)  
               #call the matrix combination function
            ans = PROD(M,x)              
            print 'Resulting tuples in R^{}'.format(x) 
                #show the tuples generated by the combination
            print GETTUP(ans)
            print "Result matrix"
                #Print final matrix solution
            for index, item in enumerate (ans,start=1):
                print(item)
                if not index % L:
                    print("")
         
        
        
        
Main()
